// fn10000000
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// ebx:ebx
// ebp:ebp
// ecx:ecx
// edx:edx
// SCZO:SCZO
// SZO:SZO
// C:C
// Z:Z
// Top:Top
// esi:esi
// edi:edi
// FPUF:FPUF
// SO:SO
// return address size: 4
define fn10000000
fn10000000_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l10000000
l10000000:
	eax = Mem0[esp + 4<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x10<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	ecx = CONVERT(Mem0[eax + 6<32>:word16], word16, int32)
	edx = CONVERT(Mem0[eax + 2<32>:word16], word16, int32)
	ebp = Mem0[esp + 0x10<32>:word32]
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = Mem0[esp + 0x18<32>:word32]
	Mem0[ebx:word32] = ecx
	ecx = CONVERT(Mem0[eax + 4<32>:word16], word16, int32)
	eax = CONVERT(Mem0[eax:word16], word16, int32)
	ecx = ecx - eax
	SCZO = cond(ecx)
	SZO = cond(ebp & ebp)
	C = false
	Mem0[esp + 0x14<32>:word32] = ecx
	Mem0[edx:word32] = ecx
	branch Test(EQ,Z) l10000107
	// succ:  l10000035 l10000107
l10000035:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[ebx:int32], int32, real64)
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	esp = esp - 4<i32>
	Mem0[esp:word32] = edi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = 0x186A0<32>
	Mem0[esp + 0x14<32>:real32] = CONVERT(ST[Top:real64], real64, real32)
	Top = Top + 1<i8>
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x1C<32>:int32], int32, real64)
	// succ:  l10000048
l10000048:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x14<32>:real32], real32, real64)
	ST[Top:real64] = ST[Top:real64] * Mem0[0x0099188A<p32>:real64]
	esi = esi + 1<32>
	SZO = cond(esi)
	Mem0[esp + 0x14<32>:real32] = CONVERT(ST[Top:real64], real64, real32)
	call fn1000010A (retsize: 4;)
	ecx = eax
	Mem0[esp + 0x1C<32>:word32] = ecx
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x1C<32>:int32], int32, real64)
	FPUF = cond(ST[Top:real64] - Mem0[esp + 0x14<32>:real32])
	Top = Top + 1<i8>
	SCZO = FPUF
	branch Test(EQ,FPUF) l1000007F
	// succ:  l10000072 l1000007F
l10000072:
	ecx = ecx + 1<32>
	SZO = cond(ecx)
	Mem0[esp + 0x14<32>:word32] = ecx
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x14<32>:int32], int32, real64)
	Mem0[esp + 0x14<32>:real32] = CONVERT(ST[Top:real64], real64, real32)
	Top = Top + 1<i8>
	// succ:  l1000007F
l1000007F:
	ST[Top:real64] = ST[Top:real64] * Mem0[0x10033290<p32>:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = ST[Top:real64]
	call fn1000010A (retsize: 4;)
	ecx = eax
	Mem0[esp + 0x1C<32>:word32] = ecx
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x1C<32>:int32], int32, real64)
	Top = Top - 1<i8>
	ST[Top:real64] = ST[Top + 1<i8>:real64]
	FPUF = cond(ST[Top:real64] - ST[Top + 1<i8>:real64])
	Top = Top + 2<i8>
	SCZO = FPUF
	branch Test(EQ,FPUF) l100000AD
	// succ:  l100000A2 l100000AD
l100000A2:
	ecx = ecx + 1<32>
	SZO = cond(ecx)
	ST[Top:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	Mem0[esp + 0x1C<32>:word32] = ecx
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x1C<32>:int32], int32, real64)
	// succ:  l100000AD
l100000AD:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x14<32>:real32], real32, real64)
	FPUF = cond(ST[Top:real64] - Mem0[0x10033298<p32>:real64])
	Top = Top + 1<i8>
	SCZO = FPUF
	branch Test(NE,FPUF) l100000D7
	// succ:  l100000BF l100000D7
l100000BF:
	FPUF = cond(ST[Top:real64] - Mem0[0x10033298<p32>:real64])
	Top = Top + 0<i8>
	SCZO = FPUF
	branch Test(NE,FPUF) l100000D7
	// succ:  l100000CD l100000D7
l100000CD:
	SCZO = cond(edi - 0x186A0<32>)
	branch Test(NE,Z) l100000D7
	// succ:  l100000D5 l100000D7
l100000D5:
	edi = esi
	// succ:  l100000D7
l100000D7:
	SCZO = cond(esi - ebp)
	branch Test(LT,SO) l10000048
	// succ:  l100000DF l10000048
l100000DF:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[esp + 0x14<32>:real32], real32, real64)
	call fn1000010A (retsize: 4;)
	Mem0[ebx:word32] = eax
	call fn1000010A (retsize: 4;)
	ecx = Mem0[esp + 0x20<32>:word32]
	SCZO = cond(ebp - edi)
	edi = Mem0[esp:word32]
	esp = esp + 4<i32>
	esi = Mem0[esp:word32]
	esp = esp + 4<i32>
	Mem0[ecx:word32] = eax
	branch Test(LE,SZO) l10000107
	// succ:  l100000FB l10000107
l100000FB:
	Mem0[ebx:word32] = 0<32>
	Mem0[ecx:word32] = 0<32>
	// succ:  l10000107
l10000107:
	ebp = Mem0[esp:word32]
	esp = esp + 4<i32>
	ebx = Mem0[esp:word32]
	esp = esp + 4<i32>
	return
	// succ:  fn10000000_exit
fn10000000_exit:

// fn1000010A
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// Top:Top
// eax:eax
// return address size: 4
define fn1000010A
fn1000010A_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l1000010A
l1000010A:
	Mem0[esp - 4<32>:word32] = CONVERT(ST[Top:real64], real64, int32)
	Top = Top + 1<i8>
	eax = Mem0[esp - 4<32>:word32]
	return
	// succ:  fn1000010A_exit
fn1000010A_exit:

